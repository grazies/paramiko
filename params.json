{
  "name": "Paramiko",
  "tagline": "The leading native Python SSHv2 protocol library.",
  "body": "========\r\nParamiko\r\n========\r\n\r\n.. Continuous integration and code coverage badges\r\n\r\n.. image:: https://travis-ci.org/paramiko/paramiko.svg?branch=master\r\n    :target: https://travis-ci.org/paramiko/paramiko\r\n.. image:: https://coveralls.io/repos/paramiko/paramiko/badge.svg?branch=master&service=github\r\n    :target: https://coveralls.io/github/paramiko/paramiko?branch=master\r\n\r\n:Paramiko:    Python SSH module\r\n:Copyright:   Copyright (c) 2003-2009  Robey Pointer <robeypointer@gmail.com>\r\n:Copyright:   Copyright (c) 2013-2016  Jeff Forcier <jeff@bitprophet.org>\r\n:License:     `LGPL <https://www.gnu.org/copyleft/lesser.html>`_\r\n:Homepage:    http://www.paramiko.org/\r\n:API docs:    http://docs.paramiko.org\r\n:Development: https://github.com/paramiko/paramiko\r\n\r\n\r\nWhat\r\n----\r\n\r\n\"Paramiko\" is a combination of the Esperanto words for \"paranoid\" and\r\n\"friend\".  It's a module for Python 2.6+/3.3+ that implements the SSH2 protocol\r\nfor secure (encrypted and authenticated) connections to remote machines. Unlike\r\nSSL (aka TLS), SSH2 protocol does not require hierarchical certificates signed\r\nby a powerful central authority.  You may know SSH2 as the protocol that\r\nreplaced Telnet and rsh for secure access to remote shells, but the protocol\r\nalso includes the ability to open arbitrary channels to remote services across\r\nthe encrypted tunnel (this is how SFTP works, for example).\r\n\r\nIt is written entirely in Python (though it depends on third-party C wrappers\r\nfor low level crypto; these are often available precompiled) and is released\r\nunder the GNU Lesser General Public License (`LGPL\r\n<https://www.gnu.org/copyleft/lesser.html>`_).\r\n\r\nThe package and its API is fairly well documented in the ``docs`` folder that\r\nshould have come with this archive.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nFor most users, the recommended method to install is via pip::\r\n\r\n    pip install paramiko\r\n\r\nFor more detailed instructions, see the `Installing\r\n<http://www.paramiko.org/installing.html>`_ page on the main Paramiko website.\r\n\r\n\r\nPortability Issues\r\n------------------\r\n\r\nParamiko primarily supports POSIX platforms with standard OpenSSH\r\nimplementations, and is most frequently tested on Linux and OS X.  Windows is\r\nsupported as well, though it may not be as straightforward.\r\n\r\nBugs & Support\r\n--------------\r\n\r\n:Bug Reports:  `Github <https://github.com/paramiko/paramiko/issues/>`_\r\n:Mailing List: ``paramiko@librelist.com`` (see the `LibreList website\r\n               <http://librelist.com/>`_ for usage details).\r\n:IRC:          ``#paramiko`` on Freenode\r\n\r\n\r\nKerberos Support\r\n----------------\r\n\r\nParamiko ships with optional Kerberos/GSSAPI support; for info on the extra\r\ndependencies for this, see the `GSS-API section\r\n<http://www.paramiko.org/installing.html#gssapi>`_\r\non the main Paramiko website.\r\n\r\n\r\nDemo\r\n----\r\n\r\nSeveral demo scripts come with Paramiko to demonstrate how to use it.\r\nProbably the simplest demo of all is this::\r\n\r\n    import paramiko, base64\r\n    key = paramiko.RSAKey(data=base64.decodestring('AAA...'))\r\n    client = paramiko.SSHClient()\r\n    client.get_host_keys().add('ssh.example.com', 'ssh-rsa', key)\r\n    client.connect('ssh.example.com', username='strongbad', password='thecheat')\r\n    stdin, stdout, stderr = client.exec_command('ls')\r\n    for line in stdout:\r\n        print '... ' + line.strip('\\n')\r\n    client.close()\r\n\r\nThis prints out the results of executing ``ls`` on a remote server. The host\r\nkey 'AAA...' should of course be replaced by the actual base64 encoding of the\r\nhost key.  If you skip host key verification, the connection is not secure!\r\n\r\nThe following example scripts (in demos/) get progressively more detailed:\r\n\r\n:demo_simple.py:\r\n    Calls invoke_shell() and emulates a terminal/TTY through which you can\r\n    execute commands interactively on a remote server.  Think of it as a\r\n    poor man's SSH command-line client.\r\n\r\n:demo.py:\r\n    Same as demo_simple.py, but allows you to authenticate using a private\r\n    key, attempts to use an SSH agent if present, and uses the long form of\r\n    some of the API calls.\r\n\r\n:forward.py:\r\n    Command-line script to set up port-forwarding across an SSH transport.\r\n\r\n:demo_sftp.py:\r\n    Opens an SFTP session and does a few simple file operations.\r\n\r\n:demo_server.py:\r\n    An SSH server that listens on port 2200 and accepts a login for\r\n    'robey' (password 'foo'), and pretends to be a BBS.  Meant to be a\r\n    very simple demo of writing an SSH server.\r\n\r\n:demo_keygen.py:\r\n    A key generator similar to OpenSSH ``ssh-keygen(1)`` program with\r\n    Paramiko keys generation and progress functions.\r\n\r\nUse\r\n---\r\n\r\nThe demo scripts are probably the best example of how to use this package.\r\nThere is also a lot of documentation, generated with Sphinx autodoc, in the\r\ndoc/ folder.\r\n\r\nThere are also unit tests here::\r\n\r\n    $ python ./test.py\r\n\r\nWhich will verify that most of the core components are working correctly.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}